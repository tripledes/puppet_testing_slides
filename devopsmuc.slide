Puppet Testing for fun and profit
DevOpsMUC 2015, July 27, 2015

Sergio Jimenez
Teradata


* About me

Recovering sysadmin:

.image images/purple_minion.png 120 160

- Used to work in traditional sysadmin envs.
- 2012, started to be interested in development.
- 2013, met Puppet, Ruby and Unit testing.
- 2014, met Acceptance testing and Golang.
- 2015, granted to switch to development (still doing Ops ;-) ).


* Agenda

- Unit Testing with RSpec Puppet
- Acceptance Testing with RSpec Beaker


* Why testing?

- Developers have been doing it for ages...
- Puppet is code, isn't it?
- Early detection of errors/bugs.
- Integration with CI systems.

.image images/Lazy-dog-framed.jpg


* Introducing Unit Testing

Unit testing, also known as component testing, refers to tests that verify the functionality of a specific section of code, usually at the function level. In an object-oriented environment, this is usually at the class level, and the minimal unit tests include the constructors and destructors. [[https://en.wikipedia.org/wiki/Software_testing#Unit_testing][Wikipedia]]

How does that translate to Puppet?

- Whatever the catalog contains.
 - Resources.
 - Classes.
 - Defined types.
 ...

* RSpec Puppet

- What is RSpec?
 Behavior-driven development framework for Ruby.

- What is RSpec-Puppet?
 RSpec extension for Puppet testing.

- Do I need to know RSpec to write Puppet tests?
 It's not manadatory, but helps.

* RSpec example

- Code:
.code examples/rspec/lib/silly.rb

- Test:
.code examples/rspec/spec/classes/silly_spec.rb

* RSpec-puppet example

- Code:
.code examples/rspec-puppet/modules/silly/manifests/init.pp

- Test:
.code examples/rspec-puppet/modules/silly/spec/classes/init_spec.rb

* RSpec-puppet example (cont.)

- Create module directory hierarchy.
  $ mkdir -p silly/{manifests,files,templates}

- Inside module directory.
  $ rspec-puppet-init --name silly
   + spec/
   + spec/classes/
   + spec/defines/
   + spec/functions/
   + spec/hosts/
   + spec/fixtures/
   + spec/fixtures/manifests/
   + spec/fixtures/modules/
   + spec/fixtures/modules/silly/
   + spec/fixtures/manifests/site.pp
   + spec/fixtures/modules/silly/manifests
   + spec/spec_helper.rb
   + Rakefile

* Introducing PuppetLabs spec helper

*puppetlabs_spec_helper* includes lots of perks:

  - helpers
  - configuration settings for puppet
  - rake tasks...

- Replace *spec_helper.rb* contents with:
  require 'puppetlabs_spec_helper/module_spec_helper'

- Replace *Rakefile* contents with:
  require 'puppetlabs_spec_helper/rake_tasks'

* Introducing PuppetLabs spec helper (cont.)

  rake beaker            # Run beaker acceptance tests
  rake beaker_nodes      # List available beaker nodesets
  rake build             # Build puppet module package
  rake clean             # Clean a built module package
  rake coverage          # Generate code coverage information
  rake help              # Display the list of available rake tasks
  rake lint              # Run puppet-lint
  rake metadata          # Validate metadata.json file
  rake spec              # Run spec tests in a clean fixtures directory
  rake spec_clean        # Clean up the fixtures directory
  rake spec_prep         # Create the fixtures directory
  rake spec_standalone   # Run spec tests on an existing fixtures directory
  rake syntax            # Syntax check Puppet manifests and templates
  rake syntax:hiera      # Syntax check Hiera config files
  rake syntax:manifests  # Syntax check Puppet manifests
  rake syntax:templates  # Syntax check Puppet templates
  rake validate          # Check syntax of Ruby files and call :syntax and :metadata
